import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, Legend } from 'recharts';
import { PieChart, Pie, Cell } from 'recharts';
import { Calendar, DollarSign, TrendingUp, BarChart2, Target, Clock, Scale } from 'lucide-react';

const Dashboard = () => {
  const [timeframeFilter, setTimeframeFilter] = useState('all');
  
  const [performanceData] = useState([
    { date: '2024-01', balance: 10000, wins: 15, losses: 7 },
    { date: '2024-02', balance: 12000, wins: 18, losses: 8 },
    { date: '2024-03', balance: 11500, wins: 12, losses: 9 },
    { date: '2024-04', balance: 13500, wins: 20, losses: 6 },
    { date: '2024-05', balance: 15000, wins: 22, losses: 5 },
  ]);

  const [timeDistribution] = useState([
    { hour: '9:30', trades: 25, winRate: 72 },
    { hour: '10:30', trades: 35, winRate: 68 },
    { hour: '11:30', trades: 20, winRate: 65 },
    { hour: '12:30', trades: 15, winRate: 60 },
    { hour: '13:30', trades: 30, winRate: 70 },
    { hour: '14:30', trades: 27, winRate: 74 },
  ]);

  const metrics = {
    winRate: 68.5,
    totalTrades: 152,
    netProfit: 5000,
    profitFactor: 2.3,
    avgWin: 250,
    avgLoss: -150,
    avgRR: 1.67,
    maxDrawdown: -1200,
    maxDrawdownPercent: 8.5,
  };

  // Updated theme colors
  const CHART_COLORS = ['#8B0000', '#A52A2A', '#B22222', '#DC143C'];

  return (
    <div className="min-h-screen bg-gray-950 text-white p-6 space-y-6">
      {/* Header with Trading Style Filter */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-4xl font-bold text-red-600">Kings Database</h1>
          <p className="text-gray-400">Professional Trading Analytics</p>
        </div>
        
        <Select defaultValue="all" onValueChange={setTimeframeFilter}>
          <SelectTrigger className="w-[180px] bg-red-950 border-red-800">
            <SelectValue placeholder="Trading Style" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Trades</SelectItem>
            <SelectItem value="scalping">Scalping (≤1h)</SelectItem>
            <SelectItem value="dayTrading">Day Trading (≤1d)</SelectItem>
            <SelectItem value="swing">Swing (1d+)</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Primary Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {[
          { icon: Target, title: 'Win Rate', value: `${metrics.winRate}%`, subtext: `${metrics.totalTrades} trades` },
          { icon: Scale, title: 'Profit Factor', value: metrics.profitFactor, subtext: 'Gross profit / loss' },
          { icon: TrendingUp, title: 'Net Profit', value: `$${metrics.netProfit}`, subtext: 'All time' },
          { icon: BarChart2, title: 'Avg R:R', value: metrics.avgRR, subtext: 'Risk-Reward Ratio' },
        ].map((metric, i) => (
          <Card key={i} className="bg-red-950 border-red-800">
            <CardHeader className="flex flex-row items-center space-x-2">
              <metric.icon className="h-6 w-6 text-red-400" />
              <CardTitle className="text-white">{metric.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-white">{metric.value}</div>
              <p className="text-sm text-gray-400">{metric.subtext}</p>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Charts */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-red-950 border-red-800">
          <CardHeader>
            <CardTitle className="text-white">Equity Curve</CardTitle>
          </CardHeader>
          <CardContent className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={performanceData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#4a0000" />
                <XAxis dataKey="date" stroke="#fff" />
                <YAxis stroke="#fff" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1a0000', border: '1px solid #8B0000' }}
                />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="balance" 
                  stroke="#ff4d4d" 
                  strokeWidth={2}
                  name="Account Balance"
                />
              </LineChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card className="bg-red-950 border-red-800">
          <CardHeader>
            <CardTitle className="text-white">Trading Hours Performance</CardTitle>
          </CardHeader>
          <CardContent className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={timeDistribution}>
                <CartesianGrid strokeDasharray="3 3" stroke="#4a0000" />
                <XAxis dataKey="hour" stroke="#fff" />
                <YAxis stroke="#fff" />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1a0000', border: '1px solid #8B0000' }}
                />
                <Legend />
                <Bar dataKey="trades" fill="#8B0000" name="Number of Trades" />
                <Bar dataKey="winRate" fill="#ff4d4d" name="Win Rate %" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Trading Metrics By Style */}
      <Card className="bg-red-950 border-red-800">
        <CardHeader>
          <CardTitle className="text-white">Trading Style Analysis</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {[
              {
                title: 'Scalping',
                duration: '≤1h',
                winRate: '72%',
                bestHours: '9:30-11:30 AM',
                avgProfit: '$25/trade'
              },
              {
                title: 'Day Trading',
                duration: '≤1d',
                winRate: '68%',
                bestHours: '9:30-10:30 AM',
                avgProfit: '$150/trade'
              },
              {
                title: 'Swing',
                duration: '1d+',
                winRate: '65%',
                bestHours: 'Mon, Wed Entry',
                avgProfit: '$450/trade'
              }
            ].map((style, i) => (
              <div key={i} className="p-4 bg-red-900/20 rounded-lg">
                <h3 className="text-lg font-semibold text-red-300 mb-2">{style.title}</h3>
                <div className="space-y-1 text-gray-300">
                  <p>Duration: {style.duration}</p>
                  <p>Win Rate: {style.winRate}</p>
                  <p>Best Time: {style.bestHours}</p>
                  <p>Avg Profit: {style.avgProfit}</p>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Dashboard;